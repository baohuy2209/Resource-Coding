<div id="page-doc" markdown="1">
  <h1 id="routing">Routing</h1>
  <p><em>Routing</em>
    refers to how an application’s endpoints (URIs) respond to client requests.
    For an introduction to routing, see
    <a href="/en/starter/basic-routing.html">Basic routing</a>.</p>
  <p>You define routing using methods of the Express
    <code>app</code>
    object that correspond to HTTP methods; for example,
    <code>app.get()</code>
    to handle GET requests and
    <code>app.post</code>
    to handle POST requests. For a full list, see
    <a href="/en/4x/api.html#app.METHOD">app.METHOD</a>. You can also use
    <a href="/en/4x/api.html#app.all">app.all()</a>
    to handle all HTTP methods and
    <a href="/en/4x/api.html#app.use">app.use()</a>
    to specify middleware as the callback function (See
    <a href="/en/guide/using-middleware.html">Using middleware</a>
    for details).</p>
  <p>These routing methods specify a callback function (sometimes called
    “handler functions”) called when the application receives a request to the
    specified route (endpoint) and HTTP method. In other words, the application
    “listens” for requests that match the specified route(s) and method(s), and
    when it detects a match, it calls the specified callback function.</p>
  <p>In fact, the routing methods can have more than one callback function as
    arguments. With multiple callback functions, it is important to provide
    <code>next</code>
    as an argument to the callback function and then call
    <code>next()</code>
    within the body of the function to hand off control to the next callback.</p>
  <p>The following code is an example of a very basic route.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>

      <span class="token comment" spellcheck="true">// respond with "hello
        world" when a GET request is made to the homepage
      </span>app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'hello world'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="route-methods">Route methods</h2>
  <p>A route method is derived from one of the HTTP methods, and is attached to
    an instance of the
    <code>express</code>
    class.</p>
  <p>The following code is an example of routes that are defined for the GET and
    the POST methods to the root of the app.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token comment"
        spellcheck="true"
      >// GET method route
      </span>app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'GET request to the homepage'</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// POST method route
      </span>app<span class="token punctuation">.</span><span
        class="token function"
      >post<span class="token punctuation">(</span></span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'POST request to the homepage'</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Express supports methods that correspond to all HTTP request methods:
    <code>get</code>,
    <code>post</code>, and so on. For a full list, see
    <a href="/en/4x/api.html#app.METHOD">app.METHOD</a>.</p>
  <p>There is a special routing method,
    <code>app.all()</code>, used to load middleware functions at a path for
    <em>all</em>
    HTTP request methods. For example, the following handler is executed for
    requests to the route “/secret” whether using GET, POST, PUT, DELETE, or any
    other HTTP request method supported in the
    <a href="https://nodejs.org/api/http.html#http_http_methods">http module</a>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token function">all<span
          class="token punctuation"
        >(</span></span><span class="token string">'/secret'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Accessing the secret section ...'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token comment" spellcheck="true">// pass control to the next
        handler
      </span><span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="route-paths">Route paths</h2>
  <p>Route paths, in combination with a request method, define the endpoints at
    which requests can be made. Route paths can be strings, string patterns, or
    regular expressions.</p>
  <p>The characters
    <code>?</code>,
    <code>+</code>,
    <code>*</code>, and
    <code>()</code>
    are subsets of their regular expression counterparts. The hyphen (<code
    >-</code>) and the dot (<code>.</code>) are interpreted literally by
    string-based paths.</p>
  <p>If you need to use the dollar character (<code>$</code>) in a path string,
    enclose it escaped within
    <code>([</code>
    and
    <code>])</code>. For example, the path string for requests at “<code
    >/data/$book</code>”, would be “<code>/data/([\$])book</code>”.</p>
  <div class="doc-box doc-info">
    <p>Express uses
      <a href="https://www.npmjs.com/package/path-to-regexp">path-to-regexp</a>
      for matching the route paths; see the path-to-regexp documentation for all
      the possibilities in defining route paths.
      <a href="http://forbeslindesay.github.io/express-route-tester/">Express
        Route Tester</a>
      is a handy tool for testing basic Express routes, although it does not
      support pattern matching.</p>
  </div>
  <div class="doc-box doc-warn">
    <p>Query strings are not part of the route path.</p>
  </div>
  <p>Here are some examples of route paths based on strings.</p>
  <p>This route path will match requests to the root route, <code>/</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'root'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match requests to <code>/about</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/about'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'about'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match requests to <code>/random.text</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/random.text'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'random.text'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Here are some examples of route paths based on string patterns.</p>
  <p>This route path will match <code>acd</code> and <code>abcd</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/ab?cd'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'ab?cd'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match
    <code>abcd</code>,
    <code>abbcd</code>,
    <code>abbbcd</code>, and so on.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/ab+cd'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'ab+cd'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match
    <code>abcd</code>,
    <code>abxcd</code>,
    <code>abRANDOMcd</code>,
    <code>ab123cd</code>, and so on.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/ab*cd'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'ab*cd'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match <code>/abe</code> and <code>/abcde</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/ab(cd)?e'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'ab(cd)?e'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Examples of route paths based on regular expressions:</p>
  <p>This route path will match anything with an “a” in it.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token regex">/a/</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'/a/'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This route path will match
    <code>butterfly</code>
    and
    <code>dragonfly</code>, but not
    <code>butterflyman</code>,
    <code>dragonflyman</code>, and so on.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token regex">/.*fly$/</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'/.*fly$/'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h3 id="route-parameters">Route parameters</h3>
  <p>Route parameters are named URL segments that are used to capture the values
    specified at their position in the URL. The captured values are populated in
    the
    <code>req.params</code>
    object, with the name of the route parameter specified in the path as their
    respective keys.</p>
  <pre><code>Route path: /users/:userId/books/:bookId Request URL:
      http://localhost:3000/users/34/books/8989 req.params: { "userId": "34",
      "bookId": "8989" }
    </code></pre>
  <p>To define routes with route parameters, simply specify the route parameters
    in the path of the route as shown below.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span
        class="token string"
      >'/users/:userId/books/:bookId'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span>req<span
        class="token punctuation"
      >.</span>params<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <div class="doc-box doc-notice">
    <p>The name of route parameters must be made up of “word characters”
      ([A-Za-z0-9_]).</p>
  </div>
  <p>Since the hyphen (<code>-</code>) and the dot (<code>.</code>) are
    interpreted literally, they can be used along with route parameters for
    useful purposes.</p>
  <pre><code>Route path: /flights/:from-:to Request URL:
      http://localhost:3000/flights/LAX-SFO req.params: { "from": "LAX", "to":
      "SFO" }
    </code></pre>
  <pre><code>Route path: /plantae/:genus.:species Request URL:
      http://localhost:3000/plantae/Prunus.persica req.params: { "genus":
      "Prunus", "species": "persica" }
    </code></pre>
  <p>To have more control over the exact string that can be matched by a route
    parameter, you can append a regular expression in parentheses (<code
    >()</code>):</p>
  <pre><code>Route path: /user/:userId(\d+) Request URL:
      http://localhost:3000/user/42 req.params: {"userId": "42"}
    </code></pre>
  <div class="doc-box doc-warn">
    <p>Because the regular expression is usually part of a literal string, be
      sure to escape any
      <code>\</code>
      characters with an additional backslash, for example
      <code>\\d+</code>.</p>
  </div>
  <div class="doc-box doc-warn">
    <p>In Express 4.x,
      <a href="https://github.com/expressjs/express/issues/2495">the
        <code>*</code>
        character in regular expressions is not interpreted in the usual way</a>.
      As a workaround, use
      <code>{0,}</code>
      instead of
      <code>*</code>. This will likely be fixed in Express 5.</p>
  </div>
  <h2 id="route-handlers">Route handlers</h2>
  <p>You can provide multiple callback functions that behave like
    <a href="/en/guide/using-middleware.html">middleware</a>
    to handle a request. The only exception is that these callbacks might invoke
    <code>next('route')</code>
    to bypass the remaining route callbacks. You can use this mechanism to
    impose pre-conditions on a route, then pass control to subsequent routes if
    there’s no reason to proceed with the current route.</p>
  <p>Route handlers can be in the form of a function, an array of functions, or
    combinations of both, as shown in the following examples.</p>
  <p>A single callback function can handle a route. For example:</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/example/a'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Hello from A!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>More than one callback function can handle a route (make sure you specify
    the
    <code>next</code>
    object). For example:</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/example/b'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'the response will be sent by the next function ...'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Hello from B!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>An array of callback functions can handle a route. For example:</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      cb0
      <span class="token operator">=</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'CB0'</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span>
      cb1
      <span class="token operator">=</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'CB1'</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span>
      cb2
      <span class="token operator">=</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Hello from C!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/example/c'</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>cb0<span
        class="token punctuation"
      >,</span>
      cb1<span class="token punctuation">,</span>
      cb2<span class="token punctuation">]</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>A combination of independent functions and arrays of functions can handle a
    route. For example:</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      cb0
      <span class="token operator">=</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'CB0'</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span>
      cb1
      <span class="token operator">=</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'CB1'</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/example/d'</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>cb0<span
        class="token punctuation"
      >,</span>
      cb1<span class="token punctuation">]</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'the response will be sent by the next function ...'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Hello from D!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="response-methods">Response methods</h2>
  <p>The methods on the response object (<code>res</code>) in the following
    table can send a response to the client, and terminate the request-response
    cycle. If none of these methods are called from a route handler, the client
    request will be left hanging.</p>
  <table>
    <thead>
      <tr>
        <th>Method</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a href="/en/4x/api.html#res.download">res.download()</a></td>
        <td>Prompt a file to be downloaded.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.end">res.end()</a></td>
        <td>End the response process.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.json">res.json()</a></td>
        <td>Send a JSON response.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.jsonp">res.jsonp()</a></td>
        <td>Send a JSON response with JSONP support.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.redirect">res.redirect()</a></td>
        <td>Redirect a request.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.render">res.render()</a></td>
        <td>Render a view template.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.send">res.send()</a></td>
        <td>Send a response of various types.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.sendFile">res.sendFile()</a></td>
        <td>Send a file as an octet stream.</td>
      </tr>
      <tr>
        <td><a href="/en/4x/api.html#res.sendStatus">res.sendStatus()</a></td>
        <td>Set the response status code and send its string representation as
          the response body.</td>
      </tr>
    </tbody>
  </table>
  <h2 id="app-route">app.route()</h2>
  <p>You can create chainable route handlers for a route path by using
    <code>app.route()</code>. Because the path is specified at a single
    location, creating modular routes is helpful, as is reducing redundancy and
    typos. For more information about routes, see:
    <a href="/en/4x/api.html#router">Router() documentation</a>.</p>
  <p>Here is an example of chained route handlers that are defined by using
    <code>app.route()</code>.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token function">route<span
          class="token punctuation"
        >(</span></span><span class="token string">'/book'</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Get a random book'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">.</span><span
        class="token function"
      >post<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Add a book'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">.</span><span
        class="token function"
      >put<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Update the book'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="express-router">express.Router</h2>
  <p>Use the
    <code>express.Router</code>
    class to create modular, mountable route handlers. A
    <code>Router</code>
    instance is a complete middleware and routing system; for this reason, it is
    often referred to as a “mini-app”.</p>
  <p>The following example creates a router as a module, loads a middleware
    function in it, defines some routes, and mounts the router module on a path
    in the main app.</p>
  <p>Create a router file named
    <code>birds.js</code>
    in the app directory, with the following content:</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      router
      <span class="token operator">=</span>
      express<span class="token punctuation">.</span><span
        class="token function"
      >Router<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// middleware that is
        specific to this router
      </span><span class="token keyword">const</span>
      timeLog
      <span class="token operator">=</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Time: '</span><span class="token punctuation">,</span>
      Date<span class="token punctuation">.</span><span
        class="token function"
      >now<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      router<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span>timeLog<span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// define the home page
        route
      </span>router<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'Birds home page'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
      <span class="token comment" spellcheck="true">// define the about route
      </span>router<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/about'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'About birds'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      module<span class="token punctuation">.</span>exports
      <span class="token operator">=</span>
      router
    </code></pre>
  <p>Then, load the router module in the app:</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      birds
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'./birds'</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// ...
      </span>
      app<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token string"
      >'/birds'</span><span class="token punctuation">,</span>
      birds<span class="token punctuation">)</span>
    </code></pre>
  <p>The app will now be able to handle requests to
    <code>/birds</code>
    and
    <code>/birds/about</code>, as well as call the
    <code>timeLog</code>
    middleware function that is specific to the route.</p>
</div>