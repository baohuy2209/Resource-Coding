<div id="page-doc" markdown="1">
  <h1 id="using-middleware">Using middleware</h1>
  <p>Express is a routing and middleware web framework that has minimal
    functionality of its own: An Express application is essentially a series of
    middleware function calls.</p>
  <p><em>Middleware</em>
    functions are functions that have access to the
    <a href="/en/4x/api.html#req">request object</a>
    (<code>req</code>), the
    <a href="/en/4x/api.html#res">response object</a>
    (<code>res</code>), and the next middleware function in the applicationâ€™s
    request-response cycle. The next middleware function is commonly denoted by
    a variable named
    <code>next</code>.</p>
  <p>Middleware functions can perform the following tasks:</p>
  <ul>
    <li>Execute any code.</li>
    <li>Make changes to the request and the response objects.</li>
    <li>End the request-response cycle.</li>
    <li>Call the next middleware function in the stack.</li>
  </ul>
  <p>If the current middleware function does not end the request-response cycle,
    it must call
    <code>next()</code>
    to pass control to the next middleware function. Otherwise, the request will
    be left hanging.</p>
  <p>An Express application can use the following types of middleware:</p>
  <ul>
    <li><a href="#middleware.application">Application-level middleware</a></li>
    <li><a href="#middleware.router">Router-level middleware</a></li>
    <li><a href="#middleware.error-handling">Error-handling middleware</a></li>
    <li><a href="#middleware.built-in">Built-in middleware</a></li>
    <li><a href="#middleware.third-party">Third-party middleware</a></li>
  </ul>
  <p>You can load application-level and router-level middleware with an optional
    mount path. You can also load a series of middleware functions together,
    which creates a sub-stack of the middleware system at a mount point.</p>
  <h2 id="middleware.application">Application-level middleware</h2>
  <p>Bind application-level middleware to an instance of the
    <a href="/en/4x/api.html#app">app object</a>
    by using the
    <code>app.use()</code>
    and
    <code>app.METHOD()</code>
    functions, where
    <code>METHOD</code>
    is the HTTP method of the request that the middleware function handles (such
    as GET, PUT, or POST) in lowercase.</p>
  <p>This example shows a middleware function with no mount path. The function
    is executed every time the app receives a request.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>

      app<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Time:'</span><span class="token punctuation">,</span>
      Date<span class="token punctuation">.</span><span
        class="token function"
      >now<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This example shows a middleware function mounted on the
    <code>/user/:id</code>
    path. The function is executed for any type of HTTP request on the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token function">use<span
          class="token punctuation"
        >(</span></span><span class="token string">'/user/:id'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request Type:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>method<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>This example shows a route and its handler function (middleware system).
    The function handles GET requests to the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/user/:id'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'USER'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Here is an example of loading a series of middleware functions at a mount
    point, with a mount path. It illustrates a middleware sub-stack that prints
    request info for any type of HTTP request to the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token function">use<span
          class="token punctuation"
        >(</span></span><span class="token string">'/user/:id'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request URL:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>originalUrl<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request Type:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>method<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Route handlers enable you to define multiple routes for a path. The example
    below defines two routes for GET requests to the
    <code>/user/:id</code>
    path. The second route will not cause any problems, but it will never get
    called because the first route ends the request-response cycle.</p>
  <p>This example shows a middleware sub-stack that handles GET requests to the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/user/:id'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'ID:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>params<span
        class="token punctuation"
      >.</span>id<span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'User Info'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// handler for the /user/:id
        path, which prints the user ID
      </span>app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span>req<span
        class="token punctuation"
      >.</span>params<span class="token punctuation">.</span>id<span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>To skip the rest of the middleware functions from a router middleware
    stack, call
    <code>next('route')</code>
    to pass control to the next route.
    <strong>NOTE</strong>:
    <code>next('route')</code>
    will work only in middleware functions that were loaded by using the
    <code>app.METHOD()</code>
    or
    <code>router.METHOD()</code>
    functions.</p>
  <p>This example shows a middleware sub-stack that handles GET requests to the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token keyword">get</span><span
        class="token punctuation"
      >(</span><span class="token string">'/user/:id'</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// if the user ID is 0, skip
        to the next route
      </span>
      <span class="token keyword">if</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >.</span>params<span class="token punctuation">.</span>id
      <span class="token operator">===</span>
      <span class="token string">'0'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token string">'route'</span><span
        class="token punctuation"
      >)</span>
      <span class="token comment" spellcheck="true">// otherwise pass the
        control to the next middleware function in this stack
      </span>
      <span class="token keyword">else</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// send a regular response
      </span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'regular'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// handler for the /user/:id
        path, which sends a special response
      </span>app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'special'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Middleware can also be declared in an array for reusability.</p>
  <p>This example shows an array with a middleware sub-stack that handles GET
    requests to the
    <code>/user/:id</code>
    path</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >function</span>
      logOriginalUrl
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request URL:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>originalUrl<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span>
      logMethod
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request Type:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>method<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span>
      logStuff
      <span class="token operator">=</span>
      <span class="token punctuation">[</span>logOriginalUrl<span
        class="token punctuation"
      >,</span>
      logMethod<span class="token punctuation">]</span>
      app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      logStuff<span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'User Info'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="middleware.router">Router-level middleware</h2>
  <p>Router-level middleware works in the same way as application-level
    middleware, except it is bound to an instance of
    <code>express.Router()</code>.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      router
      <span class="token operator">=</span>
      express<span class="token punctuation">.</span><span
        class="token function"
      >Router<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>Load router-level middleware by using the
    <code>router.use()</code>
    and
    <code>router.METHOD()</code>
    functions.</p>
  <p>The following example code replicates the middleware system that is shown
    above for application-level middleware, by using router-level middleware:</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token keyword">const</span>
      router
      <span class="token operator">=</span>
      express<span class="token punctuation">.</span><span
        class="token function"
      >Router<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// a middleware function
        with no mount path. This code is executed for every request to the
        router
      </span>router<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Time:'</span><span class="token punctuation">,</span>
      Date<span class="token punctuation">.</span><span
        class="token function"
      >now<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span><span class="token punctuation">)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// a middleware sub-stack
        shows request info for any type of HTTP request to the /user/:id path
      </span>router<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request URL:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>originalUrl<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span><span
        class="token string"
      >'Request Type:'</span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>method<span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// a middleware sub-stack
        that handles GET requests to the /user/:id path
      </span>router<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// if the user ID is 0, skip
        to the next router
      </span>
      <span class="token keyword">if</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >.</span>params<span class="token punctuation">.</span>id
      <span class="token operator">===</span>
      <span class="token string">'0'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token string">'route'</span><span
        class="token punctuation"
      >)</span>
      <span class="token comment" spellcheck="true">// otherwise pass control to
        the next middleware function in this stack
      </span>
      <span class="token keyword">else</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// render a regular page
      </span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >render<span class="token punctuation">(</span></span><span
        class="token string"
      >'regular'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// handler for the /user/:id
        path, which renders a special page
      </span>router<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >log<span class="token punctuation">(</span></span>req<span
        class="token punctuation"
      >.</span>params<span class="token punctuation">.</span>id<span
        class="token punctuation"
      >)</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >render<span class="token punctuation">(</span></span><span
        class="token string"
      >'special'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// mount the router on the
        app
      </span>app<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      router<span class="token punctuation">)</span>
    </code></pre>
  <p>To skip the rest of the routerâ€™s middleware functions, call
    <code>next('router')</code>
    to pass control back out of the router instance.</p>
  <p>This example shows a middleware sub-stack that handles GET requests to the
    <code>/user/:id</code>
    path.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token keyword">const</span>
      router
      <span class="token operator">=</span>
      express<span class="token punctuation">.</span><span
        class="token function"
      >Router<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// predicate the router with
        a check and bail out when needed
      </span>router<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >(</span>req<span class="token punctuation">,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      <span class="token keyword">if</span>
      <span class="token punctuation">(</span><span
        class="token operator"
      >!</span>req<span class="token punctuation">.</span>headers<span
        class="token punctuation"
      >[</span><span class="token string">'x-auth'</span><span
        class="token punctuation"
      >]</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token string">'router'</span><span
        class="token punctuation"
      >)</span>
      <span class="token function">next<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      router<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/user/:id'</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'hello, user!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// use the router and 401
        anything falling through
      </span>app<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token string"
      >'/admin'</span><span class="token punctuation">,</span>
      router<span class="token punctuation">,</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >sendStatus<span class="token punctuation">(</span></span><span
        class="token number"
      >401</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <h2 id="middleware.error-handling">Error-handling middleware</h2>
  <div class="doc-box doc-notice">
    <p>Error-handling middleware always takes
      <em>four</em>
      arguments. You must provide four arguments to identify it as an
      error-handling middleware function. Even if you donâ€™t need to use the
      <code>next</code>
      object, you must specify it to maintain the signature. Otherwise, the
      <code>next</code>
      object will be interpreted as regular middleware and will fail to handle
      errors.</p>
  </div>
  <p>Define error-handling middleware functions in the same way as other
    middleware functions, except with four arguments instead of three,
    specifically with the signature
    <code>(err, req, res, next)</code>):</p>
  <pre class="language-javascript"><code class="language-javascript">app<span
        class="token punctuation"
      >.</span><span class="token function">use<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">(</span>err<span
        class="token punctuation"
      >,</span>
      req<span class="token punctuation">,</span>
      res<span class="token punctuation">,</span>
      next<span class="token punctuation">)</span>
      <span class="token operator">=</span><span
        class="token operator"
      >&gt;</span>
      <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span
        class="token function"
      >error<span class="token punctuation">(</span></span>err<span
        class="token punctuation"
      >.</span>stack<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >status<span class="token punctuation">(</span></span><span
        class="token number"
      >500</span><span class="token punctuation">)</span><span
        class="token punctuation"
      >.</span><span class="token function">send<span
          class="token punctuation"
        >(</span></span><span class="token string">'Something broke!'</span><span
        class="token punctuation"
      >)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>
    </code></pre>
  <p>For details about error-handling middleware, see:
    <a href="/en/guide/error-handling.html">Error handling</a>.</p>
  <h2 id="middleware.built-in">Built-in middleware</h2>
  <p>Starting with version 4.x, Express no longer depends on
    <a href="https://github.com/senchalabs/connect">Connect</a>. The middleware
    functions that were previously included with Express are now in separate
    modules; see
    <a href="https://github.com/senchalabs/connect#middleware">the list of
      middleware functions</a>.</p>
  <p>Express has the following built-in middleware functions:</p>
  <ul>
    <li><a href="/en/4x/api.html#express.static">express.static</a>
      serves static assets such as HTML files, images, and so on.</li>
    <li><a href="/en/4x/api.html#express.json">express.json</a>
      parses incoming requests with JSON payloads.
      <strong>NOTE: Available with Express 4.16.0+</strong></li>
    <li><a href="/en/4x/api.html#express.urlencoded">express.urlencoded</a>
      parses incoming requests with URL-encoded payloads.
      <strong>NOTE: Available with Express 4.16.0+</strong></li>
  </ul>
  <h2 id="middleware.third-party">Third-party middleware</h2>
  <p>Use third-party middleware to add functionality to Express apps.</p>
  <p>Install the Node.js module for the required functionality, then load it in
    your app at the application level or at the router level.</p>
  <p>The following example illustrates installing and loading the cookie-parsing
    middleware function
    <code>cookie-parser</code>.</p>
  <pre><code class="language-console">$ npm install cookie-parser
    </code></pre>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >const</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">const</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>
      <span class="token keyword">const</span>
      cookieParser
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'cookie-parser'</span><span
        class="token punctuation"
      >)</span>

      <span class="token comment" spellcheck="true">// load the cookie-parsing
        middleware
      </span>app<span class="token punctuation">.</span><span
        class="token function"
      >use<span class="token punctuation">(</span></span><span
        class="token function"
      >cookieParser<span class="token punctuation">(</span></span><span
        class="token punctuation"
      >)</span><span class="token punctuation">)</span>
    </code></pre>
  <p>For a partial list of third-party middleware functions that are commonly
    used with Express, see:
    <a href="../resources/middleware.html">Third-party middleware</a>.</p>
</div>