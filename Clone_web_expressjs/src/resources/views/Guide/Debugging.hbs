<div id="page-doc" markdown="1">
  <h1 id="debugging-express">Debugging Express</h1>
  <p>To see all the internal logs used in Express, set the
    <code>DEBUG</code>
    environment variable to
    <code>express:*</code>
    when launching your app.</p>
  <pre><code class="language-console">$ DEBUG=express:* node index.js
    </code></pre>
  <p>On Windows, use the corresponding command.</p>
  <pre><code class="language-console">&gt; set DEBUG=express:* &amp; node
      index.js
    </code></pre>
  <p>Running this command on the default app generated by the
    <a href="/en/starter/generator.html">express generator</a>
    prints the following output:</p>
  <pre><code class="language-console">$ DEBUG=express:* node ./bin/www
      express:router:route new / +0ms express:router:layer new / +1ms
      express:router:route get / +1ms express:router:layer new / +0ms
      express:router:route new / +1ms express:router:layer new / +0ms
      express:router:route get / +0ms express:router:layer new / +0ms
      express:application compile etag weak +1ms express:application compile
      query parser extended +0ms express:application compile trust proxy false
      +0ms express:application booting in development mode +1ms express:router
      use / query +0ms express:router:layer new / +0ms express:router use /
      expressInit +0ms express:router:layer new / +0ms express:router use /
      favicon +1ms express:router:layer new / +0ms express:router use / logger
      +0ms express:router:layer new / +0ms express:router use / jsonParser +0ms
      express:router:layer new / +1ms express:router use / urlencodedParser +0ms
      express:router:layer new / +0ms express:router use / cookieParser +0ms
      express:router:layer new / +0ms express:router use / stylus +90ms
      express:router:layer new / +0ms express:router use / serveStatic +0ms
      express:router:layer new / +0ms express:router use / router +0ms
      express:router:layer new / +1ms express:router use /users router +0ms
      express:router:layer new /users +0ms express:router use /
      &amp;lt;anonymous&amp;gt; +0ms express:router:layer new / +0ms
      express:router use / &amp;lt;anonymous&amp;gt; +0ms express:router:layer
      new / +0ms express:router use / &amp;lt;anonymous&amp;gt; +0ms
      express:router:layer new / +0ms
    </code></pre>
  <p>When a request is then made to the app, you will see the logs specified in
    the Express code:</p>
  <pre><code class="language-console">
      express:router dispatching GET / +4h express:router query : / +2ms
      express:router expressInit : / +0ms express:router favicon : / +0ms
      express:router logger : / +1ms express:router jsonParser : / +0ms
      express:router urlencodedParser : / +1ms express:router cookieParser : /
      +0ms express:router stylus : / +0ms express:router serveStatic : / +2ms
      express:router router : / +2ms express:router dispatching GET / +1ms
      express:view lookup "index.pug" +338ms express:view stat
      "/projects/example/views/index.pug" +0ms express:view render
      "/projects/example/views/index.pug" +1ms
    </code></pre>
  <p>To see the logs only from the router implementation set the value of
    <code>DEBUG</code>
    to
    <code>express:router</code>. Likewise, to see logs only from the application
    implementation set the value of
    <code>DEBUG</code>
    to
    <code>express:application</code>, and so on.</p>
  <h2 id="applications-generated-by-express">Applications generated by
    <code>express</code></h2>
  <p>An application generated by the
    <code>express</code>
    command uses the
    <code>debug</code>
    module and its debug namespace is scoped to the name of the application.</p>
  <p>For example, if you generated the app with
    <code>$ express sample-app</code>, you can enable the debug statements with
    the following command:</p>
  <pre><code class="language-console">$ DEBUG=sample-app:* node ./bin/www
    </code></pre>
  <p>You can specify more than one debug namespace by assigning a
    comma-separated list of names:</p>
  <pre><code class="language-console">$ DEBUG=http,mail,express:* node index.js
    </code></pre>
  <h2 id="advanced-options">Advanced options</h2>
  <p>When running through Node.js, you can set a few environment variables that
    will change the behavior of the debug logging:</p>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Purpose</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>DEBUG</code></td>
        <td>Enables/disables specific debugging namespaces.</td>
      </tr>
      <tr>
        <td><code>DEBUG_COLORS</code></td>
        <td>Whether or not to use colors in the debug output.</td>
      </tr>
      <tr>
        <td><code>DEBUG_DEPTH</code></td>
        <td>Object inspection depth.</td>
      </tr>
      <tr>
        <td><code>DEBUG_FD</code></td>
        <td>File descriptor to write debug output to.</td>
      </tr>
      <tr>
        <td><code>DEBUG_SHOW_HIDDEN</code></td>
        <td>Shows hidden properties on inspected objects.</td>
      </tr>
    </tbody>
  </table>
  <p><strong>Note:</strong>
    The environment variables beginning with
    <code>DEBUG_</code>
    end up being converted into an Options object that gets used with
    <code>%o</code>/<code>%O</code>
    formatters. See the Node.js documentation for
    <a
      href="https://nodejs.org/api/util.html#util_util_inspect_object_options"
    ><code>util.inspect()</code></a>
    for the complete list.</p>
</div>