<div id="page-doc" markdown="1">
  <h1 id="express-application-generator">Express application generator</h1>
  <p>Use the application generator tool,
    <code>express-generator</code>, to quickly create an application skeleton.
  </p>
  <p>You can run the application generator with the
    <code>npx</code>
    command (available in Node.js 8.2.0).</p>
  <pre><code class="language-console">$ npx express-generator
    </code></pre>
  <p>For earlier Node versions, install the application generator as a global
    npm package and then launch it:</p>
  <pre><code class="language-console">$ npm install -g express-generator $
      express
    </code></pre>
  <p>Display the command options with the <code>-h</code> option:</p>
  <pre><code class="language-console">$ express -h Usage: express [options]
      [dir] Options: -h, --help output usage information --version output the
      version number -e, --ejs add ejs engine support --hbs add handlebars
      engine support --pug add pug engine support -H, --hogan add hogan.js
      engine support --no-view generate without view engine -v, --view
      &lt;engine&gt; add view &lt;engine&gt; support
      (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade) -c, --css
      &lt;engine&gt; add stylesheet &lt;engine&gt; support
      (less|stylus|compass|sass) (defaults to plain css) --git add .gitignore
      -f, --force force on non-empty directory
    </code></pre>
  <p>For example, the following creates an Express app named
    <em>myapp</em>. The app will be created in a folder named
    <em>myapp</em>
    in the current working directory and the view engine will be set to
    <a
      href="https://pugjs.org/"
      target="_blank"
      title="Pug documentation"
    >Pug</a>:</p>
  <pre><code class="language-console">$ express --view=pug myapp create : myapp
      create : myapp/package.json create : myapp/app.js create : myapp/public
      create : myapp/public/javascripts create : myapp/public/images create :
      myapp/routes create : myapp/routes/index.js create : myapp/routes/users.js
      create : myapp/public/stylesheets create :
      myapp/public/stylesheets/style.css create : myapp/views create :
      myapp/views/index.pug create : myapp/views/layout.pug create :
      myapp/views/error.pug create : myapp/bin create : myapp/bin/www
    </code></pre>
  <p>Then install dependencies:</p>
  <pre><code class="language-console">$ cd myapp $ npm install
    </code></pre>
  <p>On MacOS or Linux, run the app with this command:</p>
  <pre><code class="language-console">$ DEBUG=myapp:* npm start
    </code></pre>
  <p>On Windows Command Prompt, use this command:</p>
  <pre><code class="language-console">&gt; set DEBUG=myapp:* &amp; npm start
    </code></pre>
  <p>On Windows PowerShell, use this command:</p>
  <pre><code class="language-console">PS&gt; $env:DEBUG='myapp:*'; npm start
    </code></pre>
  <p>Then load
    <code>http://localhost:3000/</code>
    in your browser to access the app.</p>
  <p>The generated app has the following directory structure:</p>
  <pre><code class="language-console">. ├── app.js ├── bin │ └── www ├──
      package.json ├── public │ ├── images │ ├── javascripts │ └── stylesheets │
      └── style.css ├── routes │ ├── index.js │ └── users.js └── views ├──
      error.pug ├── index.pug └── layout.pug 7 directories, 9 files
    </code></pre>
  <div class="doc-box doc-info">
    <p>The app structure created by the generator is just one of many ways to
      structure Express apps. Feel free to use this structure or modify it to
      best suit your needs.</p>
  </div>
  <h3 id="previous-hello-world-next-basic-routing"><a
      href="/en/starter/hello-world.html"
    >Previous: Hello World
    </a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="/en/starter/basic-routing.html">Next:
      Basic routing</a></h3>
</div>