<div id="api-doc">
  <div class="doc-box doc-warn">
    <p><strong>Express 3.x IS NO LONGER MAINTAINED</strong></p>
    <p>Known and unknown security and performance issues in 3.x have not been
      addressed since the last update (1 August, 2015). It is highly recommended
      to use the latest version of Express.</p>
  </div>
  <h1>3.x API</h1>
  <h2 id="express">express()</h2>
  <p>Creates an Express application. The
    <code>express()</code>
    function is a top-level function exported by the
    <em>express</em>
    module.</p>
  <pre class="language-javascript"><code class="language-javascript"><span
        class="token keyword"
      >var</span>
      express
      <span class="token operator">=</span>
      <span class="token function">require<span
          class="token punctuation"
        >(</span></span><span class="token string">'express'</span><span
        class="token punctuation"
      >)</span>
      <span class="token keyword">var</span>
      app
      <span class="token operator">=</span>
      <span class="token function">express<span
          class="token punctuation"
        >(</span></span><span class="token punctuation">)</span>

      app<span class="token punctuation">.</span><span
        class="token keyword"
      >get</span><span class="token punctuation">(</span><span
        class="token string"
      >'/'</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span>
      <span class="token punctuation">(</span>req<span
        class="token punctuation"
      >,</span>
      res<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span
        class="token function"
      >send<span class="token punctuation">(</span></span><span
        class="token string"
      >'hello world'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span
        class="token punctuation"
      >)</span>

      app<span class="token punctuation">.</span><span
        class="token function"
      >listen<span class="token punctuation">(</span></span><span
        class="token number"
      >3000</span><span class="token punctuation">)</span>
    </code></pre>
  <h2 id="application">Application</h2>
  <section>
    <h3 id="app.set">app.set(name, value)</h3>
    <p>Assigns setting <code>name</code> to <code>value</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">set</span><span
          class="token punctuation"
        >(</span><span class="token string">'title'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'My Site'</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'title'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "My Site"
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.get">app.get(name)</h3>
    <p>Get setting <code>name</code> value.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'title'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; undefined
        </span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'title'</span><span class="token punctuation">,</span>
        <span class="token string">'My Site'</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'title'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "My Site"
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.enable">app.enable(name)</h3>
    <p>Set setting <code>name</code> to <code>true</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">enable<span
            class="token punctuation"
          >(</span></span><span class="token string">'trust proxy'</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.disable">app.disable(name)</h3>
    <p>Set setting <code>name</code> to <code>false</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">disable<span
            class="token punctuation"
          >(</span></span><span class="token string">'trust proxy'</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; false
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.enabled">app.enabled(name)</h3>
    <p>Check if setting <code>name</code> is enabled.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">enabled<span
            class="token punctuation"
          >(</span></span><span class="token string">'trust proxy'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; false
        </span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >enable<span class="token punctuation">(</span></span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >enabled<span class="token punctuation">(</span></span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.disabled">app.disabled(name)</h3>
    <p>Check if setting <code>name</code> is disabled.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">disabled<span
            class="token punctuation"
          >(</span></span><span class="token string">'trust proxy'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >enable<span class="token punctuation">(</span></span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >disabled<span class="token punctuation">(</span></span><span
          class="token string"
        >'trust proxy'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; false
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.configure">app.configure([env], callback)</h3>
    <p>Conditionally invoke
      <code>callback</code>
      when
      <code>env</code>
      matches
      <code>app.get('env')</code>, aka
      <code>process.env.NODE_ENV</code>. This method remains for legacy reasons,
      and is effectively an
      <code>if</code>
      statement as illustrated in the following snippets. These functions are
      <em>not</em>
      required in order to use
      <code>app.set()</code>
      and other configuration methods.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// all environments
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >configure<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'title'</span><span class="token punctuation">,</span>
        <span class="token string">'My Application'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        <span class="token comment" spellcheck="true">// development only
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >configure<span class="token punctuation">(</span></span><span
          class="token string"
        >'development'</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'db uri'</span><span class="token punctuation">,</span>
        <span class="token string">'localhost/dev'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        <span class="token comment" spellcheck="true">// production only
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >configure<span class="token punctuation">(</span></span><span
          class="token string"
        >'production'</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'db uri'</span><span class="token punctuation">,</span>
        <span class="token string">'n.n.n.n/prod'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Is effectively sugar for:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// all environments
        </span>app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'title'</span><span class="token punctuation">,</span>
        <span class="token string">'My Application'</span><span
          class="token punctuation"
        >)</span>

        <span class="token comment" spellcheck="true">// development only
        </span><span class="token keyword">if</span>
        <span class="token punctuation">(</span>app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'env'</span><span
          class="token punctuation"
        >)</span>
        <span class="token operator">===</span>
        <span class="token string">'development'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'db uri'</span><span class="token punctuation">,</span>
        <span class="token string">'localhost/dev'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// production only
        </span><span class="token keyword">if</span>
        <span class="token punctuation">(</span>app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'env'</span><span
          class="token punctuation"
        >)</span>
        <span class="token operator">===</span>
        <span class="token string">'production'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'db uri'</span><span class="token punctuation">,</span>
        <span class="token string">'n.n.n.n/prod'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.use">app.use([path], function)</h3>
    <p>Use the given middleware
      <code>function</code>, with optional mount
      <code>path</code>, defaulting to “/”.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token keyword"
        >var</span>
        express
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'express'</span><span
          class="token punctuation"
        >)</span>
        <span class="token keyword">var</span>
        app
        <span class="token operator">=</span>
        <span class="token function">express<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">// simple logger
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">,</span>
        next<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span><span
          class="token string"
        >'%s %s'</span><span class="token punctuation">,</span>
        req<span class="token punctuation">.</span>method<span
          class="token punctuation"
        >,</span>
        req<span class="token punctuation">.</span>url<span
          class="token punctuation"
        >)</span>
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        <span class="token comment" spellcheck="true">// respond
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">,</span>
        next<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'Hello World'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token function"
        >listen<span class="token punctuation">(</span></span><span
          class="token number"
        >3000</span><span class="token punctuation">)</span>
      </code></pre>
    <p>The “mount” path is stripped and is
      <strong>not</strong>
      visible to the middleware
      <code>function</code>. The main effect of this feature is that mounted
      middleware may operate without code changes regardless of its “prefix”
      pathname.</p>
    <div class="doc-box doc-notice">
      <p>A route will match any path that follows its path immediately with
        either a “<code>/</code>” or a “<code>.</code>”. For example:
        <code>app.use('/apple', ...)</code>
        will match
        <em>/apple</em>,
        <em>/apple/images</em>,
        <em>/apple/images/news</em>,
        <em>/apple.html</em>,
        <em>/apple.html.txt</em>, and so on.</p>
    </div>
    <p>Here’s a concrete example, take the typical use-case of serving files in
      ./public using the
      <code>express.static()</code>
      middleware:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /javascripts/jquery.js
        </span><span class="token comment" spellcheck="true">// GET /style.css
        </span><span class="token comment" spellcheck="true">// GET /favicon.ico
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token keyword">static</span><span
          class="token punctuation"
        >(</span>path<span class="token punctuation">.</span><span
          class="token function"
        >join<span class="token punctuation">(</span></span>__dirname<span
          class="token punctuation"
        >,</span>
        <span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Say for example you wanted to prefix all static files with “/static”, you
      could use the “mounting” feature to support this. Mounted middleware
      functions are
      <em>not</em>
      invoked unless the
      <code>req.url</code>
      contains this prefix, at which point it is stripped when the function is
      invoked. This affects this function only, subsequent middleware will see
      <code>req.url</code>
      with “/static” included unless they are mounted as well.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /static/javascripts/jquery.js
        </span><span class="token comment" spellcheck="true">// GET
          /static/style.css
        </span><span class="token comment" spellcheck="true">// GET
          /static/favicon.ico
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span><span
          class="token string"
        >'/static'</span><span class="token punctuation">,</span>
        express<span class="token punctuation">.</span><span
          class="token keyword"
        >static</span><span class="token punctuation">(</span>path<span
          class="token punctuation"
        >.</span><span class="token function">join<span
            class="token punctuation"
          >(</span></span>__dirname<span class="token punctuation">,</span>
        <span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The order of which middleware are “defined” using
      <code>app.use()</code>
      is very important, they are invoked sequentially, thus this defines
      middleware precedence. For example usually
      <code>express.logger()</code>
      is the very first middleware you would use, logging every request:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >logger<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token keyword">static</span><span
          class="token punctuation"
        >(</span>path<span class="token punctuation">.</span><span
          class="token function"
        >join<span class="token punctuation">(</span></span>__dirname<span
          class="token punctuation"
        >,</span>
        <span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'Hello'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Now suppose you wanted to ignore logging requests for static files, but
      to continue logging routes and middleware defined after
      <code>logger()</code>, you would simply move
      <code>static()</code>
      above:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token keyword"
        >static</span><span class="token punctuation">(</span>path<span
          class="token punctuation"
        >.</span><span class="token function">join<span
            class="token punctuation"
          >(</span></span>__dirname<span class="token punctuation">,</span>
        <span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">logger<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'Hello'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Another concrete example would be serving files from multiple
      directories, giving precedence to “./public” over the others:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token keyword"
        >static</span><span class="token punctuation">(</span>path<span
          class="token punctuation"
        >.</span><span class="token function">join<span
            class="token punctuation"
          >(</span></span>__dirname<span class="token punctuation">,</span>
        <span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token keyword">static</span><span
          class="token punctuation"
        >(</span>path<span class="token punctuation">.</span><span
          class="token function"
        >join<span class="token punctuation">(</span></span>__dirname<span
          class="token punctuation"
        >,</span>
        <span class="token string">'files'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token keyword">static</span><span
          class="token punctuation"
        >(</span>path<span class="token punctuation">.</span><span
          class="token function"
        >join<span class="token punctuation">(</span></span>__dirname<span
          class="token punctuation"
        >,</span>
        <span class="token string">'uploads'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app-settings">settings</h3>
    <p>The following settings are provided to alter how Express will behave:</p>
    <ul>
      <li><code>env</code>
        Environment mode, defaults to process.env.NODE_ENV or “development”</li>
      <li><code>trust proxy</code>
        Enables reverse proxy support, disabled by default</li>
      <li><code>jsonp callback name</code>
        Changes the default callback name of ?callback=</li>
      <li><code>json replacer</code>
        JSON replacer callback, null by default</li>
      <li><code>json spaces</code>
        JSON response spaces for formatting, defaults to 2 in development, 0 in
        production</li>
      <li><code>case sensitive routing</code>
        Enable case sensitivity, disabled by default, treating “/Foo” and “/foo”
        as the same</li>
      <li><code>strict routing</code>
        Enable strict routing, by default “/foo” and “/foo/” are treated the
        same by the router</li>
      <li><code>view cache</code>
        Enables view template compilation caching, enabled in production by
        default</li>
      <li><code>view engine</code>
        The default engine extension to use when omitted</li>
      <li><code>views</code>
        The view directory path, defaulting to “process.cwd() + ‘/views’”</li>
    </ul>
  </section>
  <section>
    <h3 id="app.engine">app.engine(ext, callback)</h3>
    <p>Register the given template engine
      <code>callback</code>
      as
      <code>ext</code></p>
    <p>By default will
      <code>require()</code>
      the engine based on the file extension. For example if you try to render a
      “foo.jade” file Express will invoke the following internally, and cache
      the
      <code>require()</code>
      on subsequent calls to increase performance.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">engine<span
            class="token punctuation"
          >(</span></span><span class="token string">'jade'</span><span
          class="token punctuation"
        >,</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'jade'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">.</span>__express<span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>For engines that do not provide
      <code>.__express</code>
      out of the box - or if you wish to “map” a different extension to the
      template engine you may use this method. For example mapping the EJS
      template engine to “.html” files:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">engine<span
            class="token punctuation"
          >(</span></span><span class="token string">'html'</span><span
          class="token punctuation"
        >,</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'ejs'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">.</span>renderFile<span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>In this case EJS provides a
      <code>.renderFile()</code>
      method with the same signature that Express expects:
      <code>(path, options, callback)</code>, though note that it aliases this
      method as
      <code>ejs.__express</code>
      internally so if you’re using “.ejs” extensions you dont need to do
      anything.</p>
    <p>Some template engines do not follow this convention, the
      <a href="https://github.com/visionmedia/consolidate.js">consolidate.js</a>
      library was created to map all of node’s popular template engines to
      follow this convention, thus allowing them to work seemlessly within
      Express.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token keyword"
        >var</span>
        engines
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'consolidate'</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >engine<span class="token punctuation">(</span></span><span
          class="token string"
        >'haml'</span><span class="token punctuation">,</span>
        engines<span class="token punctuation">.</span>haml<span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >engine<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">,</span>
        engines<span class="token punctuation">.</span>hogan<span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.param">app.param([name], callback)</h3>
    <p>Map logic to route parameters. For example when
      <code>:user</code>
      is present in a route path you may map user loading logic to automatically
      provide
      <code>req.user</code>
      to the route, or perform validations on the parameter input.</p>
    <p>The following snippet illustrates how the
      <code>callback</code>
      is much like middleware, thus supporting async operations, however
      providing the additional value of the parameter, here named as
      <code>id</code>. An attempt to load the user is then performed, assigning
      <code>req.user</code>, otherwise passing an error to
      <code>next(err)</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">param<span
            class="token punctuation"
          >(</span></span><span class="token string">'user'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">,</span>
        next<span class="token punctuation">,</span>
        id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        User<span class="token punctuation">.</span><span
          class="token function"
        >find<span class="token punctuation">(</span></span>id<span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >,</span>
        user<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span>user<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        req<span class="token punctuation">.</span>user
        <span class="token operator">=</span>
        user
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token keyword">new</span>
        <span class="token class-name">Error</span><span
          class="token punctuation"
        >(</span><span class="token string">'failed to load user'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Alternatively you may pass only a
      <code>callback</code>, in which case you have the opportunity to alter the
      <code>app.param()</code>
      API. For example the
      <a href="http://github.com/expressjs/express-params">express-params</a>
      defines the following callback which allows you to restrict parameters to
      a given regular expression.</p>
    <p>This example is a bit more advanced, checking if the second argument is a
      regular expression, returning the callback which acts much like the “user”
      param example.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">param<span
            class="token punctuation"
          >(</span></span><span class="token keyword">function</span>
        <span class="token punctuation">(</span>name<span
          class="token punctuation"
        >,</span>
        fn<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span>fn
        <span class="token keyword">instanceof</span>
        <span class="token class-name">RegExp</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">,</span>
        next<span class="token punctuation">,</span>
        val<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">var</span>
        captures
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >(</span>captures
        <span class="token operator">=</span>
        fn<span class="token punctuation">.</span><span
          class="token function"
        >exec<span class="token punctuation">(</span></span><span
          class="token function"
        >String<span class="token punctuation">(</span></span>val<span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >[</span>name<span class="token punctuation">]</span>
        <span class="token operator">=</span>
        captures
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token string">'route'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The method could now be used to effectively validate parameters, or also
      parse them to provide capture groups:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">param<span
            class="token punctuation"
          >(</span></span><span class="token string">'id'</span><span
          class="token punctuation"
        >,</span>
        <span class="token regex">/^\d+$/</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'/user/:id'</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'user '</span>
        <span class="token operator">+</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token function"
        >param<span class="token punctuation">(</span></span><span
          class="token string"
        >'range'</span><span class="token punctuation">,</span>
        <span class="token regex">/^(\w+)\.\.(\w+)?$/</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'/range/:range'</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">var</span>
        range
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >.</span>range res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'from '</span>
        <span class="token operator">+</span>
        range<span class="token punctuation">[</span><span
          class="token number"
        >1</span><span class="token punctuation">]</span>
        <span class="token operator">+</span>
        <span class="token string">' to '</span>
        <span class="token operator">+</span>
        range<span class="token punctuation">[</span><span
          class="token number"
        >2</span><span class="token punctuation">]</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.VERB">app.VERB(path, [callback...], callback)</h3>
    <p>The
      <code>app.VERB()</code>
      methods provide the routing functionality in Express, where
      <strong>VERB</strong>
      is one of the HTTP verbs, such as
      <code>app.post()</code>. Multiple callbacks may be given, all are treated
      equally, and behave just like middleware, with the one exception that
      these callbacks may invoke
      <code>next('route')</code>
      to bypass the remaining route callback(s). This mechanism can be used to
      perform pre-conditions on a route then pass control to subsequent routes
      when there is no reason to proceed with the route matched.</p>
    <p>The following snippet illustrates the most simple route definition
      possible. Express translates the path strings to regular expressions, used
      internally to match incoming requests. Query strings are
      <em>not</em>
      considered when peforming these matches, for example “GET /” would match
      the following route, as would “GET /?name=tobi”.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'/'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'hello world'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Regular expressions may also be used, and can be useful if you have very
      specific restraints, for example the following would match “GET
      /commits/71dbb9c” as well as “GET /commits/71dbb9c..4c084f9”.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span
          class="token regex"
        >/^\/commits\/(\w+)(?:\.\.(\w+))?$/</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">var</span>
        from
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >[</span><span class="token number">0</span><span
          class="token punctuation"
        >]</span>
        <span class="token keyword">var</span>
        to
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >[</span><span class="token number">1</span><span
          class="token punctuation"
        >]</span>
        <span class="token operator">||</span>
        <span class="token string">'HEAD'</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'commit range '</span>
        <span class="token operator">+</span>
        from
        <span class="token operator">+</span>
        <span class="token string">'..'</span>
        <span class="token operator">+</span>
        to<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Several callbacks may also be passed, useful for re-using middleware that
      load resources, perform validations, etc.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'/user/:id'</span><span
          class="token punctuation"
        >,</span>
        user<span class="token punctuation">.</span>load<span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>These callbacks may be passed within arrays as well, these arrays are
      simply flattened when passed:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token keyword"
        >var</span>
        middleware
        <span class="token operator">=</span>
        <span class="token punctuation">[</span>loadForum<span
          class="token punctuation"
        >,</span>
        loadThread<span class="token punctuation">]</span>

        app<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'/forum/:fid/thread/:tid'</span><span
          class="token punctuation"
        >,</span>
        middleware<span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token function"
        >post<span class="token punctuation">(</span></span><span
          class="token string"
        >'/forum/:fid/thread/:tid'</span><span
          class="token punctuation"
        >,</span>
        middleware<span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.all">app.all(path, [callback...], callback)</h3>
    <p>This method functions just like the
      <code>app.VERB()</code>
      methods, however it matches all HTTP verbs.</p>
    <p>This method is extremely useful for mapping “global” logic for specific
      path prefixes or arbitrary matches. For example if you placed the
      following route at the top of all other route definitions, it would
      require that all routes from that point on would require authentication,
      and automatically load a user. Keep in mind that these callbacks do not
      have to act as end points,
      <code>loadUser</code>
      can perform a task, then
      <code>next()</code>
      to continue matching subsequent routes.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">all<span
            class="token punctuation"
          >(</span></span><span class="token string">'*'</span><span
          class="token punctuation"
        >,</span>
        requireAuthentication<span class="token punctuation">,</span>
        loadUser<span class="token punctuation">)</span>
      </code></pre>
    <p>Or the equivalent:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">all<span
            class="token punctuation"
          >(</span></span><span class="token string">'*'</span><span
          class="token punctuation"
        >,</span>
        requireAuthentication<span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >all<span class="token punctuation">(</span></span><span
          class="token string"
        >'*'</span><span class="token punctuation">,</span>
        loadUser<span class="token punctuation">)</span>
      </code></pre>
    <p>Another great example of this is white-listed “global” functionality.
      Here the example is much like before, however only restricting paths
      prefixed with “/api”:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">all<span
            class="token punctuation"
          >(</span></span><span class="token string">'/api/*'</span><span
          class="token punctuation"
        >,</span>
        requireAuthentication<span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.locals">app.locals</h3>
    <p>Application local variables are provided to all templates rendered within
      the application. This is useful for providing helper functions to
      templates, as well as app-level data.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span>locals<span class="token punctuation">.</span>title
        <span class="token operator">=</span>
        <span class="token string">'My App'</span>
        app<span class="token punctuation">.</span>locals<span
          class="token punctuation"
        >.</span>strftime
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'strftime'</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The
      <code>app.locals</code>
      object is a JavaScript
      <code>Function</code>, which when invoked with an object will merge
      properties into itself, providing a simple way to expose existing objects
      as local variables.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">locals<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        title<span class="token punctuation">:</span>
        <span class="token string">'My App'</span><span
          class="token punctuation"
        >,</span>
        phone<span class="token punctuation">:</span>
        <span class="token string">'1-250-858-9990'</span><span
          class="token punctuation"
        >,</span>
        email<span class="token punctuation">:</span>
        <span class="token string">'me@myapp.com'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>app<span
          class="token punctuation"
        >.</span>locals<span class="token punctuation">.</span>title<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'My App'
        </span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>app<span
          class="token punctuation"
        >.</span>locals<span class="token punctuation">.</span>email<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'me@myapp.com'
        </span></code></pre>
    <p>A consequence of the
      <code>app.locals</code>
      Object being ultimately a Javascript Function Object is that you must not
      reuse existing (native) named properties for your own variable names, such
      as
      <code>name, apply, bind, call, arguments, length, constructor</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">locals<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span>
        <span class="token string">'My App'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>app<span
          class="token punctuation"
        >.</span>locals<span class="token punctuation">.</span>name<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; return
          'app.locals' in place of 'My App' (app.locals is a Function !)
        </span><span class="token comment" spellcheck="true">// =&gt; if name's
          variable is used in a template, a ReferenceError will be returned.
        </span></code></pre>
    <p>The full list of native named properties can be found in many
      specifications. The
      <a
        href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"
      >JavaScript specification</a>
      introduced original properties, some of which still recognized by modern
      engines, and the
      <a href="http://www.ecma-international.org/ecma-262/5.1/">EcmaScript
        specification</a>
      then built on it and normalized the set of properties, adding new ones and
      removing deprecated ones. Check out properties for Functions and Objects
      if interested.</p>
    <p>By default Express exposes only a single app-level local variable,
      <code>settings</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">set</span><span
          class="token punctuation"
        >(</span><span class="token string">'title'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'My App'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// use settings.title in a
          view
        </span></code></pre>
  </section>
  <section>
    <h3 id="app.render">app.render(view, [options], callback)</h3>
    <p>Render a
      <code>view</code>
      with a callback responding with the rendered string. This is the app-level
      variant of
      <code>res.render()</code>, and otherwise behaves the same way.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">render<span
            class="token punctuation"
          >(</span></span><span class="token string">'email'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >,</span>
        html<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        app<span class="token punctuation">.</span><span
          class="token function"
        >render<span class="token punctuation">(</span></span><span
          class="token string"
        >'email'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span>
        <span class="token string">'Tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >,</span>
        html<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="app.routes">app.routes</h3>
    <p>The
      <code>app.routes</code>
      object houses all of the routes defined mapped by the associated HTTP
      verb. This object may be used for introspection capabilities, for example
      Express uses this internally not only for routing but to provide default</p>
    <string>OPTIONS</string>
    <p>behaviour unless
      <code>app.options()</code>
      is used. Your application or framework may also remove routes by simply by
      removing them from this object.</p>
    <p>The output of <code>console.log(app.routes)</code>:</p>
    <pre><code>{ get: [ { path: '/', method: 'get', callbacks: [Object], keys:
        [], regexp: /^\/\/?$/i }, { path: '/user/:id', method: 'get', callbacks:
        [Object], keys: [{ name: 'id', optional: false }], regexp:
        /^\/user\/(?:([^\/]+?))\/?$/i } ], delete: [ { path: '/user/:id',
        method: 'delete', callbacks: [Object], keys: [Object], regexp:
        /^\/user\/(?:([^\/]+?))\/?$/i } ] }
      </code></pre>
  </section>
  <section>
    <h3 id="app.listen">app.listen()</h3>
    <p>Bind and listen for connections on the given host and port, this method
      is identical to node’s
      <a
        href="http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback"
      >http.Server#listen()</a>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token keyword"
        >var</span>
        express
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'express'</span><span
          class="token punctuation"
        >)</span>
        <span class="token keyword">var</span>
        app
        <span class="token operator">=</span>
        <span class="token function">express<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >listen<span class="token punctuation">(</span></span><span
          class="token number"
        >3000</span><span class="token punctuation">)</span>
      </code></pre>
    <p>The
      <code>app</code>
      returned by
      <code>express()</code>
      is in fact a JavaScript
      <code>Function</code>, designed to be passed to node’s http servers as a
      callback to handle requests. This allows you to provide both HTTP and
      HTTPS versions of your app with the same codebase easily, as the app does
      not inherit from these, it is simply a callback:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token keyword"
        >var</span>
        express
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'express'</span><span
          class="token punctuation"
        >)</span>
        <span class="token keyword">var</span>
        https
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'https'</span><span
          class="token punctuation"
        >)</span>
        <span class="token keyword">var</span>
        http
        <span class="token operator">=</span>
        <span class="token function">require<span
            class="token punctuation"
          >(</span></span><span class="token string">'http'</span><span
          class="token punctuation"
        >)</span>
        <span class="token keyword">var</span>
        app
        <span class="token operator">=</span>
        <span class="token function">express<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>

        http<span class="token punctuation">.</span><span
          class="token function"
        >createServer<span class="token punctuation">(</span></span>app<span
          class="token punctuation"
        >)</span><span class="token punctuation">.</span><span
          class="token function"
        >listen<span class="token punctuation">(</span></span><span
          class="token number"
        >80</span><span class="token punctuation">)</span>
        https<span class="token punctuation">.</span><span
          class="token function"
        >createServer<span class="token punctuation">(</span></span>options<span
          class="token punctuation"
        >,</span>
        app<span class="token punctuation">)</span><span
          class="token punctuation"
        >.</span><span class="token function">listen<span
            class="token punctuation"
          >(</span></span><span class="token number">443</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The
      <code>app.listen()</code>
      method is simply a convenience method defined as, if you wish to use HTTPS
      or provide both, use the technique above.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span>listen
        <span class="token operator">=</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">var</span>
        server
        <span class="token operator">=</span>
        http<span class="token punctuation">.</span><span
          class="token function"
        >createServer<span class="token punctuation">(</span></span><span
          class="token keyword"
        >this</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
        server<span class="token punctuation">.</span>listen<span
          class="token punctuation"
        >.</span><span class="token function">apply<span
            class="token punctuation"
          >(</span></span>server<span class="token punctuation">,</span>
        arguments<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      </code></pre>
  </section>
  <h2 id="request">Request</h2>
  <p>The
    <code>req</code>
    object is an enhanced version of Node’s own request object and supports all
    <a
      href="https://nodejs.org/api/http.html#http_class_http_incomingmessage"
    >built-in fields and methods</a>.</p>
  <section>
    <h3 id="req.params">req.params</h3>
    <p>This property is an array containing properties mapped to the named route
      “parameters”. For example if you have the route
      <code>/user/:name</code>, then the “name” property is available to you as
      <code>req.params.name</code>. This object defaults to
      <code>{}</code>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /user/tj
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>params<span class="token punctuation">.</span>name<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'tj'
        </span></code></pre>
    <p>When a regular expression is used for the route definition, capture
      groups are provided in the array using
      <code>req.params[N]</code>, where
      <code>N</code>
      is the nth capture group. This rule is applied to unnamed wild-card
      matches with string routes such as
      <code>/file/*</code>:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /file/javascripts/jquery.js
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>params<span class="token punctuation">[</span><span
          class="token number"
        >0</span><span class="token punctuation">]</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt;
          'javascripts/jquery.js'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.query">req.query</h3>
    <p>This property is an object containing the parsed query-string, defaulting
      to
      <code>{}</code>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /search?q=tobi+ferret
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>query<span class="token punctuation">.</span>q<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'tobi ferret'
        </span>
        <span class="token comment" spellcheck="true">// GET
          /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>query<span class="token punctuation">.</span>order<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'desc'
        </span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>query<span class="token punctuation">.</span>shoe<span
          class="token punctuation"
        >.</span>color<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'blue'
        </span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>query<span class="token punctuation">.</span>shoe<span
          class="token punctuation"
        >.</span>type<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'converse'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.body">req.body</h3>
    <p>This property is an object containing the parsed request body. This
      feature is provided by the
      <code>bodyParser()</code>
      middleware, though other body parsing middleware may follow this
      convention as well. This property defaults to
      <code>{}</code>
      when
      <code>bodyParser()</code>
      is used.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// POST user[name]=tobi&amp;user[email]=tobi@learnboost.com
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>body<span class="token punctuation">.</span>user<span
          class="token punctuation"
        >.</span>name<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tobi"
        </span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>body<span class="token punctuation">.</span>user<span
          class="token punctuation"
        >.</span>email<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt;
          "tobi@learnboost.com"
        </span>
        <span class="token comment" spellcheck="true">// POST { "name": "tobi" }
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>body<span class="token punctuation">.</span>name<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tobi"
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.files">req.files</h3>
    <p>This property is an object of the files uploaded. This feature is
      provided by the
      <code>bodyParser()</code>
      middleware, though other body parsing middleware may follow this
      convention as well. This property defaults to
      <code>{}</code>
      when
      <code>bodyParser()</code>
      is used.</p>
    <p>For example if a
      <strong>file</strong>
      field was named “image”, and a file was uploaded,
      <code>req.files.image</code>
      would contain the following
      <code>File</code>
      object:</p>
    <pre><code>{ size: 74643, path: '/tmp/8ef9c52abe857867fd0a4e9a819d1876',
        name: 'edge.png', type: 'image/png', hash: false, lastModifiedDate: Thu
        Aug 09 2012 20:07:51 GMT-0700 (PDT), _writeStream: { path:
        '/tmp/8ef9c52abe857867fd0a4e9a819d1876', fd: 13, writable: false, flags:
        'w', encoding: 'binary', mode: 438, bytesWritten: 74643, busy: false,
        _queue: [], _open: [Function], drainable: true }, length: [Getter],
        filename: [Getter], mime: [Getter] }
      </code></pre>
    <p>The
      <code>bodyParser()</code>
      middleware utilizes the
      <a href="https://github.com/felixge/node-formidable">node-formidable</a>
      module internally, and accepts the same options. An example of this is the
      <code>keepExtensions</code>
      formidable option, defaulting to
      <strong>false</strong>
      which in this case gives you the filename
      “/tmp/8ef9c52abe857867fd0a4e9a819d1876” void of the “.png” extension. To
      enable this, and others you may pass them to
      <code>bodyParser()</code>:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >bodyParser<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        keepExtensions<span class="token punctuation">:</span>
        <span class="token keyword">true</span><span
          class="token punctuation"
        >,</span>
        uploadDir<span class="token punctuation">:</span>
        <span class="token string">'/my/files'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="req.param">req.param(name)</h3>
    <p>Return the value of param <code>name</code> when present.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// ?name=tobi
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >param<span class="token punctuation">(</span></span><span
          class="token string"
        >'name'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tobi"
        </span>
        <span class="token comment" spellcheck="true">// POST name=tobi
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >param<span class="token punctuation">(</span></span><span
          class="token string"
        >'name'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tobi"
        </span>
        <span class="token comment" spellcheck="true">// /user/tobi for
          /user/:name
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >param<span class="token punctuation">(</span></span><span
          class="token string"
        >'name'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tobi"
        </span></code></pre>
    <p>Lookup is performed in the following order:</p>
    <ul>
      <li><code>req.params</code></li>
      <li><code>req.body</code></li>
      <li><code>req.query</code></li>
    </ul>
    <p>Direct access to
      <code>req.body</code>,
      <code>req.params</code>, and
      <code>req.query</code>
      should be favoured for clarity - unless you truly accept input from each
      object.</p>
  </section>
  <section>
    <h3 id="req.route">req.route</h3>
    <p>The currently matched
      <code>Route</code>
      containing several properties such as the route’s original path string,
      the regexp generated, and so on.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'/user/:id?'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>route<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Example output from the previous snippet:</p>
    <pre><code>{ path: '/user/:id?', method: 'get', callbacks: [ [Function] ],
        keys: [ { name: 'id', optional: true } ], regexp:
        /^\/user(?:\/([^\/]+?))?\/?$/i, params: [ id: '12' ] }
      </code></pre>
  </section>
  <section>
    <h3 id="req.cookies">req.cookies</h3>
    <p>This object requires the
      <code>cookieParser()</code>
      middleware for use. It contains cookies sent by the user-agent. If no
      cookies are sent, it defaults to
      <code>{}</code>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// Cookie: name=tj
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>cookies<span class="token punctuation">.</span>name<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; "tj"
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.signedCookies">req.signedCookies</h3>
    <p>This object requires the
      <code>cookieParser(secret)</code>
      middleware for use. It contains signed cookies sent by the user-agent,
      unsigned and ready for use. Signed cookies reside in a different object to
      show developer intent; otherwise, a malicious attack could be placed on
      <code>req.cookie</code>
      values (which are easy to spoof). Note that signing a cookie does not make
      it “hidden” or encrypted; this simply prevents tampering (because the
      secret used to sign is private). If no signed cookies are sent, it
      defaults to
      <code>{}</code>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// Cookie: user=tobi.CP7AWaXDfAKIRfH49dQzKJx7sKzzSoPq7/AcBBRVwlI3
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>signedCookies<span class="token punctuation">.</span>user<span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'tobi'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.get">req.get(field)</h3>
    <p>Get the case-insensitive request header
      <code>field</code>. The “Referrer” and “Referer” fields are
      interchangeable.</p>
    <pre class="language-javascript"><code class="language-javascript">req<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'Content-Type'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; "text/plain"
        </span>
        req<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'content-type'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "text/plain"
        </span>
        req<span class="token punctuation">.</span><span
          class="token keyword"
        >get</span><span class="token punctuation">(</span><span
          class="token string"
        >'Something'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; undefined
        </span></code></pre>
    <p>p Aliased as <code>req.header(field)</code>.</p>
  </section>
  <section>
    <h3 id="req.accepts">req.accepts(types)</h3>
    <p>Check if the given
      <code>types</code>
      are acceptable, returning the best match when true, otherwise
      <code>undefined</code>
      - in which case you should respond with 406 “Not Acceptable”.</p>
    <p>The
      <code>type</code>
      value may be a single mime type string such as “application/json”, the
      extension name such as “json”, a comma-delimited list or an array. When a
      list or array is given the best match, if any is returned.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// Accept: text/html
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "html"
        </span>
        <span class="token comment" spellcheck="true">// Accept: text/*,
          application/json
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "html"
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'text/html'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "text/html"
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'json, text'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "json"
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'application/json'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt;
          "application/json"
        </span>
        <span class="token comment" spellcheck="true">// Accept: text/*,
          application/json
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'image/png'</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'png'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; undefined
        </span>
        <span class="token comment" spellcheck="true">// Accept: text/*;q=.5,
          application/json
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >[</span><span class="token string">'html'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'json'</span><span
          class="token punctuation"
        >]</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >accepts<span class="token punctuation">(</span></span><span
          class="token string"
        >'html, json'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; "json"
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.accepted">req.accepted</h3>
    <p>Return an array of Accepted media types ordered from highest quality to
      lowest.</p>
    <pre><code>[ { value: 'application/json', quality: 1, type: 'application',
        subtype: 'json' }, { value: 'text/html', quality: 0.5, type: 'text',
        subtype: 'html' } ]
      </code></pre>
  </section>
  <section>
    <h3 id="req.is">req.is(type)</h3>
    <p>Check if the incoming request contains the “Content-Type” header field,
      and it matches the give mime
      <code>type</code>.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// With Content-Type: text/html; charset=utf-8
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'text/html'</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'text/*'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span>
        <span class="token comment" spellcheck="true">// When Content-Type is
          application/json
        </span>req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'json'</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'application/json'</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'application/*'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span>
        req<span class="token punctuation">.</span><span
          class="token function"
        >is<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; false
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.ip">req.ip</h3>
    <p>Return the remote address, or when “trust proxy” is enabled - the
      upstream address.</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>ip<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; '127.0.0.1'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.ips">req.ips</h3>
    <p>When “trust proxy” is
      <code>true</code>, parse the “X-Forwarded-For” ip address list and return
      an array, otherwise an empty array is returned.</p>
    <p>For example if the value were “client, proxy1, proxy2” you would receive
      the array
      <code>["client", "proxy1", "proxy2"]</code>
      where “proxy2” is the furthest down-stream.</p>
  </section>
  <section>
    <h3 id="req.path">req.path</h3>
    <p>Returns the request URL pathname.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// example.com/users?sort=desc
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>path<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; '/users'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.host">req.host</h3>
    <p>Returns the hostname from the “Host” header field (void of portno).</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// Host: "example.com:3000"
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>host<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'example.com'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.fresh">req.fresh</h3>
    <p>Check if the request is fresh - aka Last-Modified and/or the ETag still
      match, indicating that the resource is “fresh”.</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>fresh<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.stale">req.stale</h3>
    <p>Check if the request is stale - aka Last-Modified and/or the ETag do not
      match, indicating that the resource is “stale”.</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>stale<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.xhr">req.xhr</h3>
    <p>Check if the request was issued with the “X-Requested-With” header field
      set to “XMLHttpRequest” (jQuery etc).</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>xhr<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.protocol">req.protocol</h3>
    <p>Return the protocol string “http” or “https” when requested with TLS.
      When the “trust proxy” setting is enabled the “X-Forwarded-Proto” header
      field will be trusted. If you’re running behind a reverse proxy that
      supplies https for you this may be enabled.</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>protocol<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; 'http'
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.secure">req.secure</h3>
    <p>Check if a TLS connection is established. This is a short-hand for:</p>
    <pre class="language-javascript"><code
        class="language-javascript"
      >console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>protocol
        <span class="token operator">===</span>
        <span class="token string">'https'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; true
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.subdomains">req.subdomains</h3>
    <p>Return subdomains as an array.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// Host: "tobi.ferrets.example.com"
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >dir<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>subdomains<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt; ['ferrets',
          'tobi']
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.originalUrl">req.originalUrl</h3>
    <p>This property is much like
      <code>req.url</code>, however it retains the original request url,
      allowing you to rewrite
      <code>req.url</code>
      freely for internal routing purposes. For example the “mounting” feature
      of
      <a href="#app.use">app.use()</a>
      will rewrite
      <code>req.url</code>
      to strip the mount point.</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// GET /search?q=something
        </span>console<span class="token punctuation">.</span><span
          class="token function"
        >log<span class="token punctuation">(</span></span>req<span
          class="token punctuation"
        >.</span>originalUrl<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// =&gt;
          "/search?q=something"
        </span></code></pre>
  </section>
  <section>
    <h3 id="req.acceptedLanguages">req.acceptedLanguages</h3>
    <p>Return an array of Accepted languages ordered from highest quality to
      lowest.</p>
    <pre><code>Accept-Language: en;q=.5, en-us // =&gt; ['en-us', 'en']
      </code></pre>
  </section>
  <section>
    <h3 id="req.acceptedCharsets">req.acceptedCharsets</h3>
    <p>Return an array of Accepted charsets ordered from highest quality to
      lowest.</p>
    <pre><code>Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8 // =&gt;
        ['unicode-1-1', 'iso-8859-5']
      </code></pre>
  </section>
  <section>
    <h3 id="req.acceptsCharset">req.acceptsCharset(charset)</h3>
    <p>Check if the given <code>charset</code> are acceptable.</p>
  </section>
  <section>
    <h3 id="req.acceptsLanguage">req.acceptsLanguage(lang)</h3>
    <p>Check if the given <code>lang</code> are acceptable.</p>
  </section>
  <section>
    <h3 id="req.res">req.res</h3>
    <p>This property holds a reference to the
      <a href="#response">response object</a>
      that relates to this request object.</p>
  </section>
  <h2 id="response">Response</h2>
  <p>The
    <code>res</code>
    object is an enhanced version of Node’s own response object and supports all
    <a
      href="https://nodejs.org/api/http.html#http_class_http_serverresponse"
    >built-in fields and methods</a>.</p>
  <section>
    <h3 id="res.status">res.status(code)</h3>
    <p>Chainable alias of node’s <code>res.statusCode=</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">status<span
            class="token punctuation"
          >(</span></span><span class="token number">404</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">.</span><span
          class="token function"
        >sendfile<span class="token punctuation">(</span></span><span
          class="token string"
        >'path/to/404.png'</span><span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.set">res.set(field, [value])</h3>
    <p>Set header
      <code>field</code>
      to
      <code>value</code>, or pass an object to set multiple fields at once.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token keyword">set</span><span
          class="token punctuation"
        >(</span><span class="token string">'Content-Type'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'text/plain'</span><span
          class="token punctuation"
        >)</span>

        res<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token punctuation"
        >{</span>
        <span class="token string">'Content-Type'</span><span
          class="token punctuation"
        >:</span>
        <span class="token string">'text/plain'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'Content-Length'</span><span
          class="token punctuation"
        >:</span>
        <span class="token string">'123'</span><span
          class="token punctuation"
        >,</span>
        ETag<span class="token punctuation">:</span>
        <span class="token string">'12345'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Aliased as <code>res.header(field, [value])</code>.</p>
  </section>
  <section>
    <h3 id="res.get">res.get(field)</h3>
    <p>Get the case-insensitive response header <code>field</code>.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span class="token string">'Content-Type'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; "text/plain"
        </span></code></pre>
  </section>
  <section>
    <h3 id="res.cookie">res.cookie(name, value, [options])</h3>
    <p>Set cookie
      <code>name</code>
      to
      <code>value</code>, which may be a string or object converted to JSON. The
      <code>path</code>
      option defaults to “/”.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">cookie<span
            class="token punctuation"
          >(</span></span><span class="token string">'name'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'tobi'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        domain<span class="token punctuation">:</span>
        <span class="token string">'.example.com'</span><span
          class="token punctuation"
        >,</span>
        path<span class="token punctuation">:</span>
        <span class="token string">'/admin'</span><span
          class="token punctuation"
        >,</span>
        secure<span class="token punctuation">:</span>
        <span class="token keyword">true</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >cookie<span class="token punctuation">(</span></span><span
          class="token string"
        >'rememberme'</span><span class="token punctuation">,</span>
        <span class="token string">'1'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        expires<span class="token punctuation">:</span>
        <span class="token keyword">new</span>
        <span class="token class-name">Date</span><span
          class="token punctuation"
        >(</span>Date<span class="token punctuation">.</span><span
          class="token function"
        >now<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span>
        <span class="token operator">+</span>
        <span class="token number">900000</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">,</span>
        httpOnly<span class="token punctuation">:</span>
        <span class="token keyword">true</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The
      <code>maxAge</code>
      option is a convenience option for setting “expires” relative to the
      current time in milliseconds. The following is equivalent to the previous
      example.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">cookie<span
            class="token punctuation"
          >(</span></span><span class="token string">'rememberme'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'1'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        maxAge<span class="token punctuation">:</span>
        <span class="token number">900000</span><span
          class="token punctuation"
        >,</span>
        httpOnly<span class="token punctuation">:</span>
        <span class="token keyword">true</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>An object may be passed which is then serialized as JSON, which is
      automatically parsed by the
      <code>bodyParser()</code>
      middleware.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">cookie<span
            class="token punctuation"
          >(</span></span><span class="token string">'cart'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        items<span class="token punctuation">:</span>
        <span class="token punctuation">[</span><span
          class="token number"
        >1</span><span class="token punctuation">,</span>
        <span class="token number">2</span><span
          class="token punctuation"
        >,</span>
        <span class="token number">3</span><span
          class="token punctuation"
        >]</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >cookie<span class="token punctuation">(</span></span><span
          class="token string"
        >'cart'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        items<span class="token punctuation">:</span>
        <span class="token punctuation">[</span><span
          class="token number"
        >1</span><span class="token punctuation">,</span>
        <span class="token number">2</span><span
          class="token punctuation"
        >,</span>
        <span class="token number">3</span><span
          class="token punctuation"
        >]</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        maxAge<span class="token punctuation">:</span>
        <span class="token number">900000</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Signed cookies are also supported through this method. Simply pass the
      <code>signed</code>
      option. When given
      <code>res.cookie()</code>
      will use the secret passed to
      <code>express.cookieParser(secret)</code>
      to sign the value.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">cookie<span
            class="token punctuation"
          >(</span></span><span class="token string">'name'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'tobi'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        signed<span class="token punctuation">:</span>
        <span class="token keyword">true</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>Later you may access this value through the
      <a href="#req.signedCookies">req.signedCookie</a>
      object.</p>
  </section>
  <section>
    <h3 id="res.clearCookie">res.clearCookie(name, [options])</h3>
    <p>Clear cookie
      <code>name</code>. The
      <code>path</code>
      option defaults to “/”.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">cookie<span
            class="token punctuation"
          >(</span></span><span class="token string">'name'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'tobi'</span><span
          class="token punctuation"
        >,</span>
        <span class="token punctuation">{</span>
        path<span class="token punctuation">:</span>
        <span class="token string">'/admin'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >clearCookie<span class="token punctuation">(</span></span><span
          class="token string"
        >'name'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        path<span class="token punctuation">:</span>
        <span class="token string">'/admin'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.redirect">res.redirect([status], url)</h3>
    <p>Redirect to the given
      <code>url</code>
      with optional
      <code>status</code>
      code defaulting to 302 “Found”.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span class="token string">'/foo/bar'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >redirect<span class="token punctuation">(</span></span><span
          class="token string"
        >'http://example.com'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >redirect<span class="token punctuation">(</span></span><span
          class="token number"
        >301</span><span class="token punctuation">,</span>
        <span class="token string">'http://example.com'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >redirect<span class="token punctuation">(</span></span><span
          class="token string"
        >'../login'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>Express supports a few forms of redirection, first being a fully
      qualified URI for redirecting to a different site:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span
          class="token string"
        >'http://google.com'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>The second form is the pathname-relative redirect, for example if you
      were on
      <code>http://example.com/admin/post/new</code>, the following redirect to
      <code>/admin</code>
      would land you at
      <code>http://example.com/admin</code>:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span class="token string">'/admin'</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>This next redirect is relative to the
      <code>mount</code>
      point of the application. For example if you have a blog application
      mounted at
      <code>/blog</code>, ideally it has no knowledge of where it was mounted,
      so where a redirect of
      <code>/admin/post/new</code>
      would simply give you
      <code>http://example.com/admin/post/new</code>, the following
      mount-relative redirect would give you
      <code>http://example.com/blog/admin/post/new</code>:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span
          class="token string"
        >'admin/post/new'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>Pathname relative redirects are also possible. If you were on
      <code>http://example.com/admin/post/new</code>, the following redirect
      would land you at
      <code>http//example.com/admin/post</code>:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span class="token string">'..'</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>The final special-case is a
      <code>back</code>
      redirect, redirecting back to the Referer (or Referrer), defaulting to
      <code>/</code>
      when missing.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">redirect<span
            class="token punctuation"
          >(</span></span><span class="token string">'back'</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.location">res.location</h3>
    <p>Set the location header.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">location<span
            class="token punctuation"
          >(</span></span><span class="token string">'/foo/bar'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >location<span class="token punctuation">(</span></span><span
          class="token string"
        >'foo/bar'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >location<span class="token punctuation">(</span></span><span
          class="token string"
        >'http://example.com'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >location<span class="token punctuation">(</span></span><span
          class="token string"
        >'../login'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >location<span class="token punctuation">(</span></span><span
          class="token string"
        >'back'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>You can use the same kind of
      <code>urls</code>
      as in
      <code>res.redirect()</code>.</p>
    <p>For example, if your application is mounted at
      <code>/blog</code>, the following would set the
      <code>location</code>
      header to
      <code>/blog/admin</code>:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">location<span
            class="token punctuation"
          >(</span></span><span class="token string">'admin'</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.charset">res.charset</h3>
    <p>Assign the charset. Defaults to “utf-8”.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span>charset
        <span class="token operator">=</span>
        <span class="token string">'value'</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'&lt;p&gt;some html&lt;/p&gt;'</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; Content-Type:
          text/html; charset=value
        </span></code></pre>
  </section>
  <section>
    <h3 id="res.send">res.send([body|status], [body])</h3>
    <p>Send a response.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">send<span
            class="token punctuation"
          >(</span></span>Buffer<span class="token punctuation">.</span><span
          class="token function"
        >from<span class="token punctuation">(</span></span><span
          class="token string"
        >'whoop'</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        some<span class="token punctuation">:</span>
        <span class="token string">'json'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'&lt;p&gt;some html&lt;/p&gt;'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >404</span><span class="token punctuation">,</span>
        <span class="token string">'Sorry, we cannot find that!'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >500</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        error<span class="token punctuation">:</span>
        <span class="token string">'something blew up'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >200</span><span class="token punctuation">)</span>
      </code></pre>
    <p>This method performs a myriad of useful tasks for simple non-streaming
      responses such as automatically assigning the Content-Length unless
      previously defined and providing automatic
      <em>HEAD</em>
      and HTTP cache freshness support.</p>
    <p>When a
      <code>Buffer</code>
      is given the Content-Type is set to “application/octet-stream” unless
      previously defined as shown below:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token keyword">set</span><span
          class="token punctuation"
        >(</span><span class="token string">'Content-Type'</span><span
          class="token punctuation"
        >,</span>
        <span class="token string">'text/html'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span>Buffer<span
          class="token punctuation"
        >.</span><span class="token function">from<span
            class="token punctuation"
          >(</span></span><span class="token string">'&lt;p&gt;some
          html&lt;/p&gt;'</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>When a
      <code>String</code>
      is given the Content-Type is set defaulted to “text/html”:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">send<span
            class="token punctuation"
          >(</span></span><span class="token string">'&lt;p&gt;some
          html&lt;/p&gt;'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>When an
      <code>Array</code>
      or
      <code>Object</code>
      is given Express will respond with the JSON representation:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">send<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        user<span class="token punctuation">:</span>
        <span class="token string">'tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >[</span><span class="token number">1</span><span
          class="token punctuation"
        >,</span>
        <span class="token number">2</span><span
          class="token punctuation"
        >,</span>
        <span class="token number">3</span><span
          class="token punctuation"
        >]</span><span class="token punctuation">)</span>
      </code></pre>
    <p>Finally when a
      <code>Number</code>
      is given without any of the previously mentioned bodies, then a response
      body string is assigned for you. For example 200 will respond will the
      text “OK”, and 404 “Not Found” and so on.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">send<span
            class="token punctuation"
          >(</span></span><span class="token number">200</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >404</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >500</span><span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.json">res.json([status|body], [body])</h3>
    <p>Send a JSON response. This method is identical to
      <code>res.send()</code>
      when an object or array is passed, however it may be used for explicit
      JSON conversion of non-objects (null, undefined, etc), though these are
      technically not valid JSON.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">json<span
            class="token punctuation"
          >(</span></span><span class="token keyword">null</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >json<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        user<span class="token punctuation">:</span>
        <span class="token string">'tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >json<span class="token punctuation">(</span></span><span
          class="token number"
        >500</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        error<span class="token punctuation">:</span>
        <span class="token string">'message'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.jsonp">res.jsonp([status|body], [body])</h3>
    <p>Send a JSON response with JSONP support. This method is identical to
      <code>res.json()</code>
      however opts-in to JSONP callback support.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">jsonp<span
            class="token punctuation"
          >(</span></span><span class="token keyword">null</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; null
        </span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >jsonp<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        user<span class="token punctuation">:</span>
        <span class="token string">'tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; { "user": "tobi"
          }
        </span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >jsonp<span class="token punctuation">(</span></span><span
          class="token number"
        >500</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        error<span class="token punctuation">:</span>
        <span class="token string">'message'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; { "error":
          "message" }
        </span></code></pre>
    <p>By default the JSONP callback name is simply
      <code>callback</code>, however you may alter this with the
      <a href="#app-settings">jsonp callback name</a>
      setting. The following are some examples of JSONP responses using the same
      code:</p>
    <pre class="language-javascript"><code class="language-javascript"><span
          class="token comment"
          spellcheck="true"
        >// ?callback=foo
        </span>res<span class="token punctuation">.</span><span
          class="token function"
        >jsonp<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        user<span class="token punctuation">:</span>
        <span class="token string">'tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; foo({ "user":
          "tobi" })
        </span>
        app<span class="token punctuation">.</span><span
          class="token keyword"
        >set</span><span class="token punctuation">(</span><span
          class="token string"
        >'jsonp callback name'</span><span class="token punctuation">,</span>
        <span class="token string">'cb'</span><span
          class="token punctuation"
        >)</span>

        <span class="token comment" spellcheck="true">// ?cb=foo
        </span>res<span class="token punctuation">.</span><span
          class="token function"
        >jsonp<span class="token punctuation">(</span></span><span
          class="token number"
        >500</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        error<span class="token punctuation">:</span>
        <span class="token string">'message'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token comment" spellcheck="true">// =&gt; foo({ "error":
          "message" })
        </span></code></pre>
  </section>
  <section>
    <h3 id="res.type">res.type(type)</h3>
    <p>Sets the Content-Type to the mime lookup of
      <code>type</code>, or when “/” is present the Content-Type is simply set
      to this literal value.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">type<span
            class="token punctuation"
          >(</span></span><span class="token string">'.html'</span><span
          class="token punctuation"
        >)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >type<span class="token punctuation">(</span></span><span
          class="token string"
        >'html'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >type<span class="token punctuation">(</span></span><span
          class="token string"
        >'json'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >type<span class="token punctuation">(</span></span><span
          class="token string"
        >'application/json'</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >type<span class="token punctuation">(</span></span><span
          class="token string"
        >'png'</span><span class="token punctuation">)</span>
      </code></pre>
    <p>p Aliased as <code>res.contentType(type)</code>.</p>
  </section>
  <section>
    <h3 id="res.format">res.format(object)</h3>
    <p>Performs content-negotiation on the request Accept header field when
      present. This method uses
      <code>req.accepted</code>, an array of acceptable types ordered by their
      quality values, otherwise the first callback is invoked. When no match is
      performed the server responds with 406 “Not Acceptable”, or invokes the
      <code>default</code>
      callback.</p>
    <p>The Content-Type is set for you when a callback is selected, however you
      may alter this within the callback using
      <code>res.set()</code>
      or
      <code>res.type()</code>
      etcetera.</p>
    <p>The following example would respond with
      <code>{ "message": "hey" }</code>
      when the Accept header field is set to “application/json” or “<em>/json”,
        however if “</em>/*” is given then “hey” will be the response.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">format<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        <span class="token string">'text/plain'</span><span
          class="token punctuation"
        >:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'hey'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>

        <span class="token string">'text/html'</span><span
          class="token punctuation"
        >:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'&lt;p&gt;hey&lt;/p&gt;'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>

        <span class="token string">'application/json'</span><span
          class="token punctuation"
        >:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        message<span class="token punctuation">:</span>
        <span class="token string">'hey'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>In addition to canonicalized MIME types you may also use extnames mapped
      to these types, providing a slightly less verbose implementation:</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">format<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        text<span class="token punctuation">:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'hey'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>

        html<span class="token punctuation">:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token string"
        >'&lt;p&gt;hey&lt;/p&gt;'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>

        json<span class="token punctuation">:</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        message<span class="token punctuation">:</span>
        <span class="token string">'hey'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.attachment">res.attachment([filename])</h3>
    <p>Sets the Content-Disposition header field to “attachment”. If a
      <code>filename</code>
      is given then the Content-Type will be automatically set based on the
      extname via
      <code>res.type()</code>, and the Content-Disposition’s “filename=”
      parameter will be set.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">attachment<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// Content-Disposition:
          attachment
        </span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >attachment<span class="token punctuation">(</span></span><span
          class="token string"
        >'path/to/logo.png'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// Content-Disposition:
          attachment; filename="logo.png"
        </span><span class="token comment" spellcheck="true">// Content-Type:
          image/png
        </span></code></pre>
  </section>
  <section>
    <h3 id="res.sendfile">res.sendfile(path, [options], [fn]])</h3>
    <p>Transfer the file at the given <code>path</code>.</p>
    <p>Automatically defaults the Content-Type response header field based on
      the filename’s extension. The callback
      <code>fn(err)</code>
      is invoked when the transfer is complete or when an error occurs.</p>
    <p>Options:</p>
    <ul>
      <li><code>maxAge</code> in milliseconds defaulting to 0</li>
      <li><code>root</code> root directory for relative filenames</li>
    </ul>
    <p>This method provides fine-grained support for file serving as illustrated
      in the following example:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token keyword">get</span><span
          class="token punctuation"
        >(</span><span
          class="token string"
        >'/user/:uid/photos/:file'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">var</span>
        uid
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >.</span>uid
        <span class="token keyword">var</span>
        file
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>params<span
          class="token punctuation"
        >.</span>file req<span class="token punctuation">.</span>user<span
          class="token punctuation"
        >.</span><span class="token function">mayViewFilesFrom<span
            class="token punctuation"
          >(</span></span>uid<span class="token punctuation">,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>yes<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span>yes<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >sendfile<span class="token punctuation">(</span></span><span
          class="token string"
        >'/uploads/'</span>
        <span class="token operator">+</span>
        uid
        <span class="token operator">+</span>
        <span class="token string">'/'</span>
        <span class="token operator">+</span>
        file<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span
          class="token function"
        >send<span class="token punctuation">(</span></span><span
          class="token number"
        >403</span><span class="token punctuation">,</span>
        <span class="token string">'Sorry! you cant see that.'</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.download">res.download(path, [filename], [fn])</h3>
    <p>Transfer the file at
      <code>path</code>
      as an “attachment”, typically browsers will prompt the user for download.
      The Content-Disposition “filename=” parameter, aka the one that will
      appear in the brower dialog is set to
      <code>path</code>
      by default, however you may provide an override
      <code>filename</code>.</p>
    <p>When an error has ocurred or transfer is complete the optional callback
      <code>fn</code>
      is invoked. This method uses
      <a href="#res.sendfile">res.sendfile()</a>
      to transfer the file.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">download<span
            class="token punctuation"
          >(</span></span><span
          class="token string"
        >'/report-12345.pdf'</span><span class="token punctuation">)</span>

        res<span class="token punctuation">.</span><span
          class="token function"
        >download<span class="token punctuation">(</span></span><span
          class="token string"
        >'/report-12345.pdf'</span><span class="token punctuation">,</span>
        <span class="token string">'report.pdf'</span><span
          class="token punctuation"
        >)</span>

        res<span class="token punctuation">.</span><span
          class="token function"
        >download<span class="token punctuation">(</span></span><span
          class="token string"
        >'/report-12345.pdf'</span><span class="token punctuation">,</span>
        <span class="token string">'report.pdf'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">if</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// handle error, keep in
          mind the response may be partially-sent
        </span>
        <span class="token comment" spellcheck="true">// so check res.headerSent
        </span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// decrement a download
          credit etc
        </span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.links">res.links(links)</h3>
    <p>Join the given
      <code>links</code>
      to populate the “Link” response header field.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">links<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">{</span>
        next<span class="token punctuation">:</span>
        <span
          class="token string"
        >'http://api.example.com/users?page=2'</span><span
          class="token punctuation"
        >,</span>
        last<span class="token punctuation">:</span>
        <span class="token string">'http://api.example.com/users?page=5'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>p yields:</p>
    <pre><code>Link: &lt;http://api.example.com/users?page=2&gt; rel="next",
        &lt;http://api.example.com/users?page=5&gt; rel="last"
      </code></pre>
  </section>
  <section>
    <h3 id="res.locals">res.locals</h3>
    <p>Response local variables are scoped to the request, thus only available
      to the view(s) rendered during that request / response cycle, if any.
      Otherwise this API is identical to
      <a href="#app.locals">app.locals</a>.</p>
    <p>This object is useful for exposing request-level information such as the
      request pathname, authenticated user, user settings etcetera.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span><span class="token keyword">function</span>
        <span class="token punctuation">(</span>req<span
          class="token punctuation"
        >,</span>
        res<span class="token punctuation">,</span>
        next<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span>locals<span
          class="token punctuation"
        >.</span>user
        <span class="token operator">=</span>
        req<span class="token punctuation">.</span>user res<span
          class="token punctuation"
        >.</span>locals<span class="token punctuation">.</span>authenticated
        <span class="token operator">=</span>
        <span class="token operator">!</span>req<span
          class="token punctuation"
        >.</span>user<span class="token punctuation">.</span>anonymous
        <span class="token function">next<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.render">res.render(view, [locals], callback)</h3>
    <p>Render a
      <code>view</code>
      with a callback responding with the rendered string. When an error occurs
      <code>next(err)</code>
      is invoked internally. When a callback is provided both the possible error
      and rendered string are passed, and no automated response is performed.</p>
    <pre class="language-javascript"><code class="language-javascript">res<span
          class="token punctuation"
        >.</span><span class="token function">render<span
            class="token punctuation"
          >(</span></span><span class="token string">'index'</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >,</span>
        html<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>

        res<span class="token punctuation">.</span><span
          class="token function"
        >render<span class="token punctuation">(</span></span><span
          class="token string"
        >'user'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span>
        <span class="token string">'Tobi'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>
        <span class="token keyword">function</span>
        <span class="token punctuation">(</span>err<span
          class="token punctuation"
        >,</span>
        html<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ...
        </span><span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="res.req">res.req</h3>
    <p>This property holds a reference to the
      <a href="#request">request object</a>
      that relates to this response object.</p>
  </section>
  <h2 id="middleware">Middleware</h2>
  <section>
    <h3 id="basicAuth">basicAuth()</h3>
    <p>Basic Authentication middleware, populating
      <code>req.user</code>
      with the username.</p>
    <p>Simple username and password:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >basicAuth<span class="token punctuation">(</span></span><span
          class="token string"
        >'username'</span><span class="token punctuation">,</span>
        <span class="token string">'password'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
    <p>Callback verification:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >basicAuth<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>user<span
          class="token punctuation"
        >,</span>
        pass<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
        user
        <span class="token operator">===</span>
        <span class="token string">'tj'</span>
        <span class="token operator">&amp;&amp;</span>
        pass
        <span class="token operator">===</span>
        <span class="token string">'wahoo'</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
    <p>Async callback verification, accepting
      <code>fn(err, user)</code>, in this case
      <code>req.user</code>
      will be the user object passed.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >basicAuth<span class="token punctuation">(</span></span><span
          class="token keyword"
        >function</span>
        <span class="token punctuation">(</span>user<span
          class="token punctuation"
        >,</span>
        pass<span class="token punctuation">,</span>
        fn<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        User<span class="token punctuation">.</span><span
          class="token function"
        >authenticate<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >{</span>
        user<span class="token punctuation">:</span>
        user<span class="token punctuation">,</span>
        pass<span class="token punctuation">:</span>
        pass
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >,</span>
        fn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="bodyParser">bodyParser()</h3>
    <p>Request body parsing middleware supporting JSON, urlencoded, and
      multipart requests. This middleware is simply a wrapper for the
      <code>json()</code>,
      <code>urlencoded()</code>, and
      <code>multipart()</code>
      middleware.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >bodyParser<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">// is equivalent to:
        </span>app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">json<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">urlencoded<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">multipart<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>For security sake, it’s better to disable file upload if your application
      doesn’t need it. To do this, use only the needed middleware, i.e. don’t
      use the
      <code>bodyParser</code>
      and
      <code>multipart()</code>
      middleware:</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >json<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">urlencoded<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
    <p>If your application needs file upload you should set up
      <a
        href="https://groups.google.com/d/msg/express-js/iP2VyhkypHo/5AXQiYN3RPcJ"
      >a strategy for dealing with those files</a>.</p>
  </section>
  <section>
    <h3 id="compress">compress()</h3>
    <p>Compress response data with gzip / deflate. This middleware should be
      placed “high” within the stack to ensure all responses may be compressed.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >logger<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">compress<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">methodOverride<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">bodyParser<span
            class="token punctuation"
          >(</span></span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="cookieParser">cookieParser()</h3>
    <p>Parses the Cookie header field and populates
      <code>req.cookies</code>
      with an object keyed by the cookie names. Optionally you may enabled
      signed cookie support by passing a
      <code>secret</code>
      string.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >cookieParser<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token function">cookieParser<span
            class="token punctuation"
          >(</span></span><span class="token string">'some secret'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
  </section>
  <section>
    <h3 id="cookieSession">cookieSession()</h3>
    <p>Provides cookie-based sessions, and populates
      <code>req.session</code>. This middleware takes the following options:</p>
    <ul>
      <li><code>key</code>
        cookie name defaulting to
        <code>connect.sess</code></li>
      <li><code>secret</code> prevents cookie tampering</li>
      <li><code>cookie</code>
        session cookie settings, defaulting to
        <code>{ path: '/', httpOnly: true, maxAge: null }</code></li>
      <li><code>proxy</code>
        trust the reverse proxy when setting secure cookies (via
        “x-forwarded-proto”)</li>
    </ul>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >cookieSession<span class="token punctuation">(</span></span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
    <p>To clear a cookie simply assign the session to null before responding:</p>
    <pre class="language-javascript"><code class="language-javascript">req<span
          class="token punctuation"
        >.</span>session
        <span class="token operator">=</span>
        <span class="token keyword">null</span>
      </code></pre>
  </section>
  <section>
    <h3 id="csrf">csrf()</h3>
    <p>CSRF protection middleware.</p>
    <p>By default this middleware generates a token named “_csrf” which should
      be added to requests which mutate state, within a hidden form field,
      query-string etc. This token is validated against
      <code>req.csrfToken()</code>.</p>
    <p>The default
      <code>value</code>
      function checks
      <code>req.body</code>
      generated by the
      <code>bodyParser()</code>
      middleware,
      <code>req.query</code>
      generated by
      <code>query()</code>, and the “X-CSRF-Token” header field.</p>
    <p>This middleware requires session support, thus should be added somewhere
      below
      <code>session()</code>.</p>
  </section>
  <section>
    <h3 id="directory">directory()</h3>
    <p>Directory serving middleware, serves the given
      <code>path</code>. This middleware may be paired with
      <code>static()</code>
      to serve files, providing a full-featured file browser.</p>
    <pre class="language-javascript"><code class="language-javascript">app<span
          class="token punctuation"
        >.</span><span class="token function">use<span
            class="token punctuation"
          >(</span></span>express<span class="token punctuation">.</span><span
          class="token function"
        >directory<span class="token punctuation">(</span></span><span
          class="token string"
        >'public'</span><span class="token punctuation">)</span><span
          class="token punctuation"
        >)</span>
        app<span class="token punctuation">.</span><span
          class="token function"
        >use<span class="token punctuation">(</span></span>express<span
          class="token punctuation"
        >.</span><span class="token keyword">static</span><span
          class="token punctuation"
        >(</span><span class="token string">'public'</span><span
          class="token punctuation"
        >)</span><span class="token punctuation">)</span>
      </code></pre>
    <p>This middleware accepts the following options:</p>
    <ul>
      <li><code>hidden</code>
        display hidden (dot) files. Defaults to false.</li>
      <li><code>icons</code> display icons. Defaults to false.</li>
      <li><code>filter</code>
        Apply this filter function to files. Defaults to false.</li>
    </ul>
  </section>
</div>